# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: Run a one-line script
      run: echo Hello, world!

    # Runs a set of commands using the runners shell
    - name: Run a multi-line script
      run: |
        echo Add other actions to build,
        echo test, and deploy your project.
    - name: Setup NuGet.exe for use with actions
      uses: NuGet/setup-nuget@v1.0.2
      with:
        # NuGet version to install. Can be `latest`, `preview`, a concrete version like `5.3.1`, or a semver range specifier like `5.x`.
        nuget-version: # optional, default is latest
        # NuGet API Key to configure.
        nuget-api-key: # optional
        # Source to scope the NuGet API Key to.
        nuget-api-key-source: # optional
        
    - name: Publish NuGet
      uses: brandedoutcast/publish-nuget@v2.5.5
      with:
        # Filepath of the project to be packaged, relative to root of repository
        PROJECT_FILE_PATH: 
        # NuGet package id, used for version detection & defaults to project name
        PACKAGE_NAME: # optional
        # Filepath with version info, relative to root of repository & defaults to PROJECT_FILE_PATH
        VERSION_FILE_PATH: # optional
        # Regex pattern to extract version info in a capturing group
        VERSION_REGEX: # optional, default is ^\s*<Version>(.*)<\/Version>\s*$
        # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH & VERSION_REGEX
        VERSION_STATIC: # optional
        # Flag to toggle git tagging, enabled by default
        TAG_COMMIT: # optional, default is true
        # Format of the git tag, [*] gets replaced with actual version
        TAG_FORMAT: # optional, default is v*
        # API key to authenticate with NuGet server
        NUGET_KEY: # optional
        # NuGet server uri hosting the packages, defaults to https://api.nuget.org
        NUGET_SOURCE: # optional, default is https://api.nuget.org
        # Flag to toggle pushing symbols along with nuget package to the server, disabled by default
        INCLUDE_SYMBOLS: # optional
